typedef struct label_t {
 long val[2];
} label_t;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;
typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;
typedef __int32_t __int_fast8_t;
typedef __uint32_t __uint_fast8_t;
typedef __int32_t __int_fast16_t;
typedef __uint32_t __uint_fast16_t;
typedef __int32_t __int_fast32_t;
typedef __uint32_t __uint_fast32_t;
typedef __int64_t __int_fast64_t;
typedef __uint64_t __uint_fast64_t;
typedef long __intptr_t;
typedef unsigned long __uintptr_t;
typedef __int64_t __intmax_t;
typedef __uint64_t __uintmax_t;
typedef long __register_t;
typedef unsigned long __vaddr_t;
typedef unsigned long __paddr_t;
typedef unsigned long __vsize_t;
typedef unsigned long __psize_t;
typedef double __double_t;
typedef float __float_t;
typedef long __ptrdiff_t;
typedef unsigned long __size_t;
typedef long __ssize_t;
typedef __builtin_va_list __va_list;
typedef int __wchar_t;
typedef int __wint_t;
typedef int __rune_t;
typedef void * __wctrans_t;
typedef void * __wctype_t;
typedef __int64_t __blkcnt_t;
typedef __int32_t __blksize_t;
typedef __int64_t __clock_t;
typedef __int32_t __clockid_t;
typedef unsigned long __cpuid_t;
typedef __int32_t __dev_t;
typedef __uint32_t __fixpt_t;
typedef __uint64_t __fsblkcnt_t;
typedef __uint64_t __fsfilcnt_t;
typedef __uint32_t __gid_t;
typedef __uint32_t __id_t;
typedef __uint32_t __in_addr_t;
typedef __uint16_t __in_port_t;
typedef __uint64_t __ino_t;
typedef long __key_t;
typedef __uint32_t __mode_t;
typedef __uint32_t __nlink_t;
typedef __int64_t __off_t;
typedef __int32_t __pid_t;
typedef __uint64_t __rlim_t;
typedef __uint8_t __sa_family_t;
typedef __int32_t __segsz_t;
typedef __uint32_t __socklen_t;
typedef long __suseconds_t;
typedef __int32_t __swblk_t;
typedef __int64_t __time_t;
typedef __int32_t __timer_t;
typedef __uint32_t __uid_t;
typedef __uint32_t __useconds_t;
typedef union {
 char __mbstate8[128];
 __int64_t __mbstateL;
} __mbstate_t;
static inline __uint16_t
__mswap16(volatile const __uint16_t *m)
{
 __uint16_t v;
 __asm("lduha [%1] %2, %0 ! %3"
     : "=r" (v)
     : "r" (m), "n" (0x88), "m" (*m));
 return (v);
}
static inline __uint32_t
__mswap32(volatile const __uint32_t *m)
{
 __uint32_t v;
 __asm("lduwa [%1] %2, %0 ! %3"
     : "=r" (v)
     : "r" (m), "n" (0x88), "m" (*m));
 return (v);
}
static inline __uint64_t
__mswap64(volatile const __uint64_t *m)
{
 __uint64_t v;
 __asm("ldxa [%1] %2, %0 ! %3"
     : "=r" (v)
     : "r" (m), "n" (0x88), "m" (*m));
 return (v);
}
static inline void
__swapm16(volatile __uint16_t *m, __uint16_t v)
{
 __asm("stha %1, [%2] %3 ! %0"
     : "=m" (*m)
     : "r" (v), "r" (m), "n" (0x88));
}
static inline void
__swapm32(volatile __uint32_t *m, __uint32_t v)
{
 __asm("stwa %1, [%2] %3 ! %0"
     : "=m" (*m)
     : "r" (v), "r" (m), "n" (0x88));
}
static inline void
__swapm64(volatile __uint64_t *m, __uint64_t v)
{
 __asm("stxa %1, [%2] %3 ! %0"
     : "=m" (*m)
     : "r" (v), "r" (m), "n" (0x88));
}
static inline __uint16_t
__swap16md(__uint16_t x)
{
 return ((__uint16_t)(((__uint16_t)(x) & 0xffU) << 8 | ((__uint16_t)(x) & 0xff00U) >> 8));
}
static inline __uint32_t
__swap32md(__uint32_t x)
{
 return ((__uint32_t)(((__uint32_t)(x) & 0xff) << 24 | ((__uint32_t)(x) & 0xff00) << 8 | ((__uint32_t)(x) & 0xff0000) >> 8 | ((__uint32_t)(x) & 0xff000000) >> 24));
}
static inline __uint64_t
__swap64md(__uint64_t x)
{
 return ((__uint64_t)((((__uint64_t)(x) & 0xff) << 56) | ((__uint64_t)(x) & 0xff00ULL) << 40 | ((__uint64_t)(x) & 0xff0000ULL) << 24 | ((__uint64_t)(x) & 0xff000000ULL) << 8 | ((__uint64_t)(x) & 0xff00000000ULL) >> 8 | ((__uint64_t)(x) & 0xff0000000000ULL) >> 24 | ((__uint64_t)(x) & 0xff000000000000ULL) >> 40 | ((__uint64_t)(x) & 0xff00000000000000ULL) >> 56));
}
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
typedef __cpuid_t cpuid_t;
typedef __register_t register_t;
typedef __int8_t int8_t;
typedef __uint8_t uint8_t;
typedef __int16_t int16_t;
typedef __uint16_t uint16_t;
typedef __int32_t int32_t;
typedef __uint32_t uint32_t;
typedef __int64_t int64_t;
typedef __uint64_t uint64_t;
typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;
typedef __int64_t quad_t;
typedef __uint64_t u_quad_t;
typedef __vaddr_t vaddr_t;
typedef __paddr_t paddr_t;
typedef __vsize_t vsize_t;
typedef __psize_t psize_t;
typedef __blkcnt_t blkcnt_t;
typedef __blksize_t blksize_t;
typedef char * caddr_t;
typedef __int32_t daddr32_t;
typedef __int64_t daddr_t;
typedef __dev_t dev_t;
typedef __fixpt_t fixpt_t;
typedef __gid_t gid_t;
typedef __id_t id_t;
typedef __ino_t ino_t;
typedef __key_t key_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __rlim_t rlim_t;
typedef __segsz_t segsz_t;
typedef __swblk_t swblk_t;
typedef __uid_t uid_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
typedef __clock_t clock_t;
typedef __clockid_t clockid_t;
typedef __pid_t pid_t;
typedef __size_t size_t;
typedef __ssize_t ssize_t;
typedef __time_t time_t;
typedef __timer_t timer_t;
typedef __off_t off_t;
struct proc;
struct pgrp;
struct ucred;
struct rusage;
struct file;
struct buf;
struct tty;
struct uio;
typedef u_int16_t keysym_t;
typedef u_int32_t kbd_t;
struct wscons_keymap {
 keysym_t command;
 keysym_t group1[2];
 keysym_t group2[2];
};
struct wscons_keydesc {
 kbd_t name;
 kbd_t base;
 int map_size;
 const keysym_t *map;
};
struct wskbd_mapdata {
 const struct wscons_keydesc *keydesc;
 kbd_t layout;
};
void wskbd_get_mapentry(const struct wskbd_mapdata *, int,
                                struct wscons_keymap *);
void wskbd_init_keymap(int, struct wscons_keymap **, int *);
int wskbd_load_keymap(const struct wskbd_mapdata *, kbd_t,
                               struct wscons_keymap **, int *);
keysym_t wskbd_compose_value(keysym_t *);
static const keysym_t ukbd_keydesc_us[] = {
    ((4) | 0xe000), 0x61,
    ((5) | 0xe000), 0x62,
    ((6) | 0xe000), 0x63,
    ((7) | 0xe000), 0x64,
    ((8) | 0xe000), 0x65,
    ((9) | 0xe000), 0x66,
    ((10) | 0xe000), 0x67,
    ((11) | 0xe000), 0x68,
    ((12) | 0xe000), 0x69,
    ((13) | 0xe000), 0x6a,
    ((14) | 0xe000), 0x6b,
    ((15) | 0xe000), 0x6c,
    ((16) | 0xe000), 0x6d,
    ((17) | 0xe000), 0x6e,
    ((18) | 0xe000), 0x6f,
    ((19) | 0xe000), 0x70,
    ((20) | 0xe000), 0x71,
    ((21) | 0xe000), 0x72,
    ((22) | 0xe000), 0x73,
    ((23) | 0xe000), 0x74,
    ((24) | 0xe000), 0x75,
    ((25) | 0xe000), 0x76,
    ((26) | 0xe000), 0x77,
    ((27) | 0xe000), 0x78,
    ((28) | 0xe000), 0x79,
    ((29) | 0xe000), 0x7a,
    ((30) | 0xe000), 0x31, 0x21,
    ((31) | 0xe000), 0x32, 0x40,
    ((32) | 0xe000), 0x33, 0x23,
    ((33) | 0xe000), 0x34, 0x24,
    ((34) | 0xe000), 0x35, 0x25,
    ((35) | 0xe000), 0x36, 0x5e,
    ((36) | 0xe000), 0x37, 0x26,
    ((37) | 0xe000), 0x38, 0x2a,
    ((38) | 0xe000), 0x39, 0x28,
    ((39) | 0xe000), 0x30, 0x29,
    ((40) | 0xe000), 0x0d,
    ((41) | 0xe000), 0xf420,0x1b,
    ((42) | 0xe000), 0xf421,0x7f,
    ((43) | 0xe000), 0x09,
    ((44) | 0xe000), 0x20,
    ((45) | 0xe000), 0x2d, 0x5f,
    ((46) | 0xe000), 0x3d, 0x2b,
    ((47) | 0xe000), 0x5b, 0x7b,
    ((48) | 0xe000), 0x5d,0x7d,
    ((49) | 0xe000), 0x5c, 0x7c,
    ((50) | 0xe000), 0x5c, 0x7c,
    ((51) | 0xe000), 0x3b, 0x3a,
    ((52) | 0xe000), 0x27, 0x22,
    ((53) | 0xe000), 0x60, 0x7e,
    ((54) | 0xe000), 0x2c, 0x3c,
    ((55) | 0xe000), 0x2e, 0x3e,
    ((56) | 0xe000), 0x2f, 0x3f,
    ((57) | 0xe000), 0xf105,
    ((58) | 0xe000), 0xf400, 0xf300,
    ((59) | 0xe000), 0xf401, 0xf301,
    ((60) | 0xe000), 0xf402, 0xf302,
    ((61) | 0xe000), 0xf403, 0xf303,
    ((62) | 0xe000), 0xf404, 0xf304,
    ((63) | 0xe000), 0xf405, 0xf305,
    ((64) | 0xe000), 0xf406, 0xf306,
    ((65) | 0xe000), 0xf407, 0xf307,
    ((66) | 0xe000), 0xf408, 0xf308,
    ((67) | 0xe000), 0xf409, 0xf309,
    ((68) | 0xe000), 0xf40a,0xf30a,
    ((69) | 0xe000), 0xf40b,0xf30b,
    ((70) | 0xe000), 0xf3c2,
    ((71) | 0xe000), 0xf10c,
    ((72) | 0xe000), 0xf3c1,
    ((73) | 0xe000), 0xf389,
    ((74) | 0xe000), 0xf381,
    ((75) | 0xe000), 0xf42c,0xf382,
    ((76) | 0xe000), 0xf42e,0xf29f,
    ((77) | 0xe000), 0xf388,
    ((78) | 0xe000), 0xf42d,0xf383,
    ((79) | 0xe000), 0xf387,
    ((80) | 0xe000), 0xf386,
    ((81) | 0xe000), 0xf385,
    ((82) | 0xe000), 0xf384,
    ((83) | 0xe000), 0xf10b,
    ((84) | 0xe000), 0xf22f,
    ((85) | 0xe000), 0xf22a,
    ((86) | 0xe000), 0xf22d,
    ((87) | 0xe000), 0xf22b,
    ((88) | 0xe000), 0xf20d,
    ((89) | 0xe000), 0xf29c, 0xf231,
    ((90) | 0xe000), 0xf299, 0xf232,
    ((91) | 0xe000), 0xf29b, 0xf233,
    ((92) | 0xe000), 0xf296, 0xf234,
    ((93) | 0xe000), 0xf29d, 0xf235,
    ((94) | 0xe000), 0xf298, 0xf236,
    ((95) | 0xe000), 0xf295, 0xf237,
    ((96) | 0xe000), 0xf297, 0xf238,
    ((97) | 0xe000), 0xf29a, 0xf239,
    ((98) | 0xe000), 0xf29e, 0xf230,
    ((99) | 0xe000), 0xf29f, 0xf22e,
    ((101) | 0xe000), 0xf3c0,
    ((104) | 0xe000), 0xf30c,
    ((105) | 0xe000), 0xf30d,
    ((106) | 0xe000), 0xf30e,
    ((107) | 0xe000), 0xf30f,
    ((108) | 0xe000), 0xf310,
    ((109) | 0xe000), 0xf311,
    ((110) | 0xe000), 0xf312,
    ((111) | 0xe000), 0xf313,
    ((112) | 0xe000), 0xf314,
    ((113) | 0xe000), 0xf315,
    ((114) | 0xe000), 0xf316,
    ((115) | 0xe000), 0xf317,
    ((116) | 0xe000), 0xf393,
    ((117) | 0xe000), 0xf38a,
    ((118) | 0xe000), 0xf38f,
    ((119) | 0xe000), 0xf391,
    ((120) | 0xe000), 0xf10d,
    ((121) | 0xe000), 0xf38e,
    ((122) | 0xe000), 0xf390,
    ((123) | 0xe000), 0xf395,
    ((124) | 0xe000), 0xf392,
    ((125) | 0xe000), 0xf394,
    ((126) | 0xe000), 0xf38c,
    ((127) | 0xe000), 0xf3d1,
    ((128) | 0xe000), 0xf3d3,
    ((129) | 0xe000), 0xf3d2,
    ((224) | 0xe000), 0xf10e, 0xf103,
    ((225) | 0xe000), 0xf101,
    ((226) | 0xe000), 0xf10f, 0xf107,
    ((227) | 0xe000), 0xf110,
    ((228) | 0xe000), 0xf10e, 0xf104,
    ((229) | 0xe000), 0xf102,
    ((230) | 0xe000), 0xf10f, 0xf108, 0xf109,
    ((231) | 0xe000), 0xf111,
};
static const keysym_t ukbd_keydesc_de[] = {
    ((16) | 0xe000), 0x6d, 0x4d, 0xb5,
    ((20) | 0xe000), 0x71, 0x51, 0x40,
    ((28) | 0xe000), 0x7a,
    ((29) | 0xe000), 0x79,
    ((31) | 0xe000), 0x32, 0x22, 0xb2,
    ((32) | 0xe000), 0x33, 0xa7, 0xb3,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f, 0x7b,
    ((37) | 0xe000), 0x38, 0x28, 0x5b,
    ((38) | 0xe000), 0x39, 0x29, 0x5d,
    ((39) | 0xe000), 0x30, 0x3d, 0x7d,
    ((45) | 0xe000), 0xdf, 0x3f, 0x5c,
    ((46) | 0xe000), 0x0301, 0x0300,
    ((47) | 0xe000), 0xfc,
    ((48) | 0xe000), 0x2b, 0x2a, 0x0303,
    ((49) | 0xe000), 0x23, 0x27,
    ((50) | 0xe000), 0x23, 0x27,
    ((51) | 0xe000), 0xf6,
    ((52) | 0xe000), 0xe4,
    ((53) | 0xe000), 0x0302,0x030a,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e, 0x7c, 0xa6,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_de_nodead[] = {
    ((46) | 0xe000), 0x27, 0x60,
    ((48) | 0xe000), 0x2b, 0x2a, 0x7e,
    ((53) | 0xe000), 0x5e, 0xb0,
};
static const keysym_t ukbd_keydesc_dk[] = {
    ((31) | 0xe000), 0x32, 0x22, 0x40,
    ((32) | 0xe000), 0x33, 0x23, 0xa3,
    ((33) | 0xe000), 0x34, 0xa4, 0x24,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f, 0x7b,
    ((37) | 0xe000), 0x38, 0x28, 0x5b,
    ((38) | 0xe000), 0x39, 0x29, 0x5d,
    ((39) | 0xe000), 0x30, 0x3d, 0x7d,
    ((45) | 0xe000), 0x2b, 0x3f,
    ((46) | 0xe000), 0x0301, 0x0300, 0x7c,
    ((47) | 0xe000), 0xe5,
    ((48) | 0xe000), 0x0308,0x0302,0x0303,
    ((49) | 0xe000), 0x27, 0x2a,
    ((50) | 0xe000), 0x27, 0x2a,
    ((51) | 0xe000), 0xe6,
    ((52) | 0xe000), 0xf8,
    ((53) | 0xe000), 0xbd, 0xb6,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e, 0x5c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_dk_nodead[] = {
    ((46) | 0xe000), 0x27, 0x60, 0x7c,
    ((48) | 0xe000), 0xa8, 0x5e, 0x7e,
};
static const keysym_t ukbd_keydesc_sv[] = {
    ((45) | 0xe000), 0x2b, 0x3f, 0x5c,
    ((48) | 0xe000), 0x0308,0x0302,0x0303,
    ((51) | 0xe000), 0xf6,
    ((52) | 0xe000), 0xe4,
    ((53) | 0xe000), 0xa7, 0xbd,
    ((100) | 0xe000), 0x3c, 0x3e, 0x7c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_sv_nodead[] = {
    ((46) | 0xe000), 0x27, 0x60, 0x7c,
    ((48) | 0xe000), 0xa8, 0x5e, 0x7e,
};
static const keysym_t ukbd_keydesc_no[] = {
    ((46) | 0xe000), 0x5c, 0x0300, 0x0301,
    ((48) | 0xe000), 0x0308,0x0302,0x0303,
    ((51) | 0xe000), 0xf8,
    ((52) | 0xe000), 0xe6,
    ((53) | 0xe000), 0x7c, 0xb6,
    ((100) | 0xe000), 0x3c, 0x3e,
};
static const keysym_t ukbd_keydesc_no_nodead[] = {
    ((46) | 0xe000), 0x5c, 0x60, 0xb4,
    ((48) | 0xe000), 0xa8, 0x5e, 0x7e,
};
static const keysym_t ukbd_keydesc_fr[] = {
    ((4) | 0xe000), 0x71,
    ((16) | 0xe000), 0x2c, 0x3f,
    ((20) | 0xe000), 0x61,
    ((26) | 0xe000), 0x7a,
    ((29) | 0xe000), 0x77,
    ((30) | 0xe000), 0x26, 0x31,
    ((31) | 0xe000), 0xe9, 0x32, 0x7e,
    ((32) | 0xe000), 0x22, 0x33, 0x23,
    ((33) | 0xe000), 0x27, 0x34, 0x7b,
    ((34) | 0xe000), 0x28, 0x35, 0x5b,
    ((35) | 0xe000), 0x2d, 0x36, 0x7c,
    ((36) | 0xe000), 0xe8, 0x37, 0x60,
    ((37) | 0xe000), 0x5f, 0x38, 0x5c,
    ((38) | 0xe000), 0xe7, 0x39, 0x5e,
    ((39) | 0xe000), 0xe0, 0x30, 0x40,
    ((45) | 0xe000), 0x29, 0xb0, 0x5d,
    ((46) | 0xe000), 0x3d, 0x2b, 0x7d,
    ((47) | 0xe000), 0x0302,0x0308,
    ((48) | 0xe000), 0x24, 0xa3, 0xa4,
    ((49) | 0xe000), 0x2a, 0xb5,
    ((50) | 0xe000), 0x2a, 0xb5,
    ((51) | 0xe000), 0x6d,
    ((52) | 0xe000), 0xf9, 0x25,
    ((53) | 0xe000), 0xb2,
    ((54) | 0xe000), 0x3b, 0x2e,
    ((55) | 0xe000), 0x3a, 0x2f,
    ((56) | 0xe000), 0x21, 0xa7,
    ((100) | 0xe000), 0x3c, 0x3e,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_fr_apple[] = {
    ((5) | 0xe000), 0x62, 0x42, 0xdf,
    ((8) | 0xe000), 0x65, 0x45, 0xea, 0xca,
    ((11) | 0xe000), 0x68, 0x48, 0xcc, 0xce,
    ((12) | 0xe000), 0x69, 0x49, 0xee, 0xef,
    ((13) | 0xe000), 0x6a, 0x4a, 0xcf, 0xcd,
    ((14) | 0xe000), 0x6b, 0x4b, 0xc8, 0xcb,
    ((15) | 0xe000), 0x6c, 0x4c, 0xf500, 0x7c,
    ((16) | 0xe000), 0x2c, 0x3f, 0xf500, 0xbf,
    ((17) | 0xe000), 0x6e, 0x4e, 0x7e,
    ((20) | 0xe000), 0x61, 0x41, 0xe6, 0xc6,
    ((21) | 0xe000), 0x72, 0x52, 0xae, 0x2c,
    ((22) | 0xe000), 0x73, 0x53, 0xd2,
    ((26) | 0xe000), 0x7a, 0x5a, 0xc2, 0xc5,
    ((28) | 0xe000), 0x79, 0x59, 0xda,
    ((31) | 0xe000), 0xe9, 0x32, 0xeb,
    ((32) | 0xe000), 0x22, 0x33,
    ((33) | 0xe000), 0x27, 0x34,
    ((34) | 0xe000), 0x28, 0x35, 0x7b, 0x5b,
    ((35) | 0xe000), 0xa7, 0x36,
    ((36) | 0xe000), 0xe8, 0x37, 0xab,
      0xbb,
    ((37) | 0xe000), 0x21, 0x38,
    ((38) | 0xe000), 0xe7, 0x39, 0xc7, 0xc1,
    ((37) | 0xe000), 0x21, 0x38, 0xa1, 0xdb,
    ((39) | 0xe000), 0xe0, 0x30, 0xf8, 0xd8,
    ((45) | 0xe000), 0x29, 0xb0, 0x7d, 0x5d,
    ((46) | 0xe000), 0x2d, 0x5f,
    ((47) | 0xe000), 0x0302, 0x0308,
      0xf4, 0xd4,
    ((48) | 0xe000), 0x24, 0x2a, 0xa2, 0xa5,
    ((50) | 0xe000), 0x60, 0xa3, 0x40, 0x23,
    ((51) | 0xe000), 0x6d, 0x4d, 0xb5, 0xd3,
    ((52) | 0xe000), 0xf9, 0x25, 0xd9,
    ((53) | 0xe000), 0x40, 0x23,
    ((55) | 0xe000), 0x3a, 0x2f, 0xf500, 0x5c,
    ((56) | 0xe000), 0x3d, 0x2b,
    ((103) | 0xe000), 0xf23d,
    ((231) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_fr_dvorak_bepo[] = {
    ((4) | 0xe000), 0x61, 0x41, 0xe6, 0xc6,
    ((5) | 0xe000), 0x6b, 0x4b, 0x7e,
    ((6) | 0xe000), 0x78, 0x58, 0x7d,
    ((7) | 0xe000), 0x69, 0x49, 0x0308,
    ((8) | 0xe000), 0x70, 0x50, 0x26,
    ((9) | 0xe000), 0x65, 0x45,
    ((10) | 0xe000), 0x2c, 0x3b,
    ((11) | 0xe000), 0x63,
    ((12) | 0xe000), 0x64,
    ((13) | 0xe000), 0x74,
    ((14) | 0xe000), 0x73,
    ((15) | 0xe000), 0x72,
    ((16) | 0xe000), 0x71, 0x51,
    ((17) | 0xe000), 0x27, 0x3f,
    ((18) | 0xe000), 0x6c,
    ((19) | 0xe000), 0x6a,
    ((20) | 0xe000), 0x62, 0x42, 0x7c,
    ((21) | 0xe000), 0x6f, 0x4f,
    ((22) | 0xe000), 0x75, 0x55, 0xf9, 0xd9,
    ((23) | 0xe000), 0xe8, 0xc8, 0x0300,
    ((24) | 0xe000), 0x76,
    ((25) | 0xe000), 0x2e, 0x3a,
    ((26) | 0xe000), 0xe9, 0xc9, 0x0301,
    ((27) | 0xe000), 0x79, 0x59, 0x7b,
    ((28) | 0xe000), 0x0302,0x21,
    ((29) | 0xe000), 0xe0, 0xc0, 0x5c,
    ((30) | 0xe000), 0x22, 0x31, 0xad,
    ((31) | 0xe000), 0xab,0x32, 0x3c,
    ((32) | 0xe000), 0xbb,0x33, 0x3e,
    ((33) | 0xe000), 0x28, 0x34, 0x5b,
    ((34) | 0xe000), 0x29, 0x35, 0x5d,
    ((35) | 0xe000), 0x40, 0x36,
    ((36) | 0xe000), 0x2b, 0x37,
    ((37) | 0xe000), 0x2d, 0x38,
    ((38) | 0xe000), 0x2f, 0x39,
    ((39) | 0xe000), 0x2a, 0x30,
    ((44) | 0xe000), 0x20, 0xa0,0x5f,
    ((45) | 0xe000), 0x3d, 0x5e,
    ((46) | 0xe000), 0x25, 0x60,
    ((47) | 0xe000), 0x7a,
    ((48) | 0xe000), 0x77,
    ((49) | 0xe000), 0xe7, 0xc7,
    ((50) | 0xe000), 0xe7, 0xc7,
    ((51) | 0xe000), 0x6e,
    ((52) | 0xe000), 0x6d,
    ((53) | 0xe000), 0x24, 0x23,
    ((54) | 0xe000), 0x67, 0x47, 0xb5,
    ((55) | 0xe000), 0x68,
    ((56) | 0xe000), 0x66,
    ((100) | 0xe000), 0xe8, 0xc8, 0x2f,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_it[] = {
    ((31) | 0xe000), 0x32, 0x22, 0xb2,
    ((32) | 0xe000), 0x33, 0xa3, 0xb3,
    ((34) | 0xe000), 0x35, 0x25,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f,
    ((37) | 0xe000), 0x38, 0x28,
    ((38) | 0xe000), 0x39, 0x29,
    ((39) | 0xe000), 0x30, 0x3d,
    ((45) | 0xe000), 0x27, 0x3f,
    ((46) | 0xe000), 0xec, 0x5e,
    ((47) | 0xe000), 0xe8, 0xe9, 0x7b, 0x5b,
    ((48) | 0xe000), 0x2b, 0x2a, 0x7d, 0x5d,
    ((49) | 0xe000), 0xf9, 0xa7,
    ((50) | 0xe000), 0xf9, 0xa7,
    ((51) | 0xe000), 0xf2, 0xc7, 0x40,
    ((52) | 0xe000), 0xe0, 0xb0, 0x23,
    ((53) | 0xe000), 0x5c, 0x7c,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_uk[] = {
    ((30) | 0xe000), 0x31, 0x21, 0xb1, 0xa1,
    ((31) | 0xe000), 0x32, 0x22, 0xb2, 0xa2,
    ((32) | 0xe000), 0x33, 0xa3, 0xb3,
    ((33) | 0xe000), 0x34, 0x24, 0xb4, 0xa4,
    ((34) | 0xe000), 0x35, 0x25, 0xb5, 0xa5,
    ((35) | 0xe000), 0x36, 0x5e, 0xb6,
    ((36) | 0xe000), 0x37, 0x26, 0xb7,0xa6,
    ((37) | 0xe000), 0x38, 0x2a, 0xb8, 0xaa,
    ((38) | 0xe000), 0x39, 0x28, 0xb9, 0xa8,
    ((39) | 0xe000), 0x30, 0x29, 0xba, 0xa9,
    ((45) | 0xe000), 0x2d, 0x5f, 0xad, 0xdf,
    ((46) | 0xe000), 0x3d, 0x2b, 0xbd, 0xab,
    ((49) | 0xe000), 0x23, 0x7e, 0xa3, 0xfe,
    ((50) | 0xe000), 0x23, 0x7e, 0xa3, 0xfe,
    ((52) | 0xe000), 0x27, 0x40, 0xa7, 0xc0,
    ((53) | 0xe000), 0x60, 0x60, 0xe0, 0xe0,
    ((100) | 0xe000), 0x5c, 0x7c, 0xdc,
};
static const keysym_t ukbd_keydesc_jp[] = {
    ((31) | 0xe000), 0x32, 0x22,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x27,
    ((37) | 0xe000), 0x38, 0x28,
    ((38) | 0xe000), 0x39, 0x29,
    ((39) | 0xe000), 0x30,
    ((45) | 0xe000), 0x2d, 0x3d,
    ((46) | 0xe000), 0x5e, 0x7e,
    ((47) | 0xe000), 0x40, 0x60,
    ((48) | 0xe000), 0x5b, 0x7b,
    ((49) | 0xe000), 0x5d,0x7d,
    ((50) | 0xe000), 0x5d,0x7d,
    ((51) | 0xe000), 0x3b, 0x2b,
    ((52) | 0xe000), 0x3a, 0x2a,
    ((53) | 0xe000), 0xf112,
    ((135) | 0xe000), 0x5c, 0x5f,
    ((136) | 0xe000), 0xf113,
    ((137) | 0xe000), 0x5c, 0x7c,
    ((138) | 0xe000), 0xf115,
    ((139) | 0xe000), 0xf116,
};
static const keysym_t ukbd_keydesc_es[] = {
    ((30) | 0xe000), 0x31, 0x21, 0x7c,
    ((31) | 0xe000), 0x32, 0x22, 0x40,
    ((32) | 0xe000), 0x33, 0xb7,0x23,
    ((33) | 0xe000), 0x34, 0x24, 0x7e,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f,
    ((37) | 0xe000), 0x38, 0x28,
    ((38) | 0xe000), 0x39, 0x29,
    ((39) | 0xe000), 0x30, 0x3d,
    ((45) | 0xe000), 0x27, 0x3f,
    ((46) | 0xe000), 0xa1, 0xbf,
    ((47) | 0xe000), 0x0300, 0x0302,0x5b,
    ((48) | 0xe000), 0x2b, 0x2a, 0x5d,
    ((49) | 0xe000), 0xe7, 0xc7, 0x7d,
    ((50) | 0xe000), 0xe7, 0xc7, 0x7d,
    ((51) | 0xe000), 0xf1,
    ((52) | 0xe000), 0x0301, 0x0308,0x7b,
    ((53) | 0xe000), 0xb0, 0xaa, 0x5c,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_lt[] = {
    ((8) | 0xe000), 0x65, 0x45, 0xa4,
    ((9) | 0xe000), 0x0161, 0x0160,
    ((20) | 0xe000), 0x0105, 0x0104,
    ((26) | 0xe000), 0x017e, 0x017d,
    ((27) | 0xe000), 0x016b, 0x016a,
    ((30) | 0xe000), 0x21, 0x31, 0x40,
    ((31) | 0xe000), 0x2d, 0x32, 0x5f,
    ((32) | 0xe000), 0x2f, 0x33, 0x23,
    ((33) | 0xe000), 0x3b, 0x34, 0x24,
    ((34) | 0xe000), 0x3a, 0x35, 0xb6,
    ((35) | 0xe000), 0x2c, 0x36, 0x5e,
    ((36) | 0xe000), 0x2e, 0x37, 0x26,
    ((37) | 0xe000), 0x3d, 0x38, 0x2a,
    ((38) | 0xe000), 0x5b, 0x39, 0x28,
    ((39) | 0xe000), 0x5d,0x30, 0x29,
    ((44) | 0xe000), 0x20, 0x20, 0xa0,
    ((45) | 0xe000), 0x3f, 0x2b, 0x27,
    ((46) | 0xe000), 0x78, 0x58, 0x25,
    ((47) | 0xe000), 0x012f, 0x012e, 0x7b,
    ((48) | 0xe000), 0x77, 0x57, 0x7d,
    ((49) | 0xe000), 0x71, 0x51, 0x7c,
    ((50) | 0xe000), 0x71, 0x51, 0x7c,
    ((51) | 0xe000), 0x0173, 0x0172,
    ((52) | 0xe000), 0x0117, 0x0116, 0x22,
    ((53) | 0xe000), 0x60, 0x7e,
    ((54) | 0xe000), 0x010d, 0x010c, 0x201e,
    ((55) | 0xe000), 0x66, 0x46, 0x201c,
    ((56) | 0xe000), 0x0119, 0x0118, 0x5c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_be[] = {
    ((4) | 0xe000), 0x71,
    ((16) | 0xe000), 0x2c, 0x3f,
    ((20) | 0xe000), 0x61,
    ((26) | 0xe000), 0x7a,
    ((29) | 0xe000), 0x77,
    ((30) | 0xe000), 0x26, 0x31, 0x7c,
    ((31) | 0xe000), 0xe9, 0x32, 0x40,
    ((32) | 0xe000), 0x22, 0x33, 0x23,
    ((33) | 0xe000), 0x27, 0x34,
    ((34) | 0xe000), 0x28, 0x35,
    ((35) | 0xe000), 0xa7, 0x36, 0x5e,
    ((36) | 0xe000), 0xe8, 0x37,
    ((37) | 0xe000), 0x21, 0x38,
    ((38) | 0xe000), 0xe7, 0x39, 0x7b,
    ((39) | 0xe000), 0xe0, 0x30, 0x7d,
    ((45) | 0xe000), 0x29, 0xb0,
    ((46) | 0xe000), 0x2d, 0x5f,
    ((47) | 0xe000), 0x0302,0x0308,0x5b,
    ((48) | 0xe000), 0x24, 0x2a, 0x5d,
    ((49) | 0xe000), 0xb5, 0xa3, 0x60,
    ((50) | 0xe000), 0xb5, 0xa3, 0x60,
    ((51) | 0xe000), 0x6d,
    ((52) | 0xe000), 0xf9, 0x25, 0xb4,
    ((53) | 0xe000), 0xb2, 0xb3,
    ((54) | 0xe000), 0x3b, 0x2e,
    ((55) | 0xe000), 0x3a, 0x2f,
    ((56) | 0xe000), 0x3d, 0x2b, 0x7e,
    ((100) | 0xe000), 0x3c, 0x3e, 0x5c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_us_dvorak[] = {
    ((5) | 0xe000), 0x78,
    ((6) | 0xe000), 0x6a,
    ((7) | 0xe000), 0x65,
    ((8) | 0xe000), 0x2e, 0x3e,
    ((9) | 0xe000), 0x75,
    ((10) | 0xe000), 0x69,
    ((11) | 0xe000), 0x64,
    ((12) | 0xe000), 0x63,
    ((13) | 0xe000), 0x68,
    ((14) | 0xe000), 0x74,
    ((15) | 0xe000), 0x6e,
    ((17) | 0xe000), 0x62,
    ((18) | 0xe000), 0x72,
    ((19) | 0xe000), 0x6c,
    ((20) | 0xe000), 0x27, 0x22,
    ((21) | 0xe000), 0x70,
    ((22) | 0xe000), 0x6f,
    ((23) | 0xe000), 0x79,
    ((24) | 0xe000), 0x67,
    ((25) | 0xe000), 0x6b,
    ((26) | 0xe000), 0x2c, 0x3c,
    ((27) | 0xe000), 0x71,
    ((28) | 0xe000), 0x66,
    ((29) | 0xe000), 0x3b, 0x3a,
    ((45) | 0xe000), 0x5b, 0x7b,
    ((46) | 0xe000), 0x5d,0x7d,
    ((47) | 0xe000), 0x2f, 0x3f,
    ((48) | 0xe000), 0x3d, 0x2b,
    ((51) | 0xe000), 0x73,
    ((52) | 0xe000), 0x2d, 0x5f,
    ((54) | 0xe000), 0x77,
    ((55) | 0xe000), 0x76,
    ((56) | 0xe000), 0x7a,
};
static const keysym_t ukbd_keydesc_swapctrlcaps[] = {
    ((57) | 0xe000), 0xf10e, 0xf103,
    ((224) | 0xe000), 0xf105,
};
static const keysym_t ukbd_keydesc_iopener[] = {
    ((58) | 0xe000), 0xf420,0x1b,
    ((59) | 0xe000), 0xf400, 0xf300,
    ((60) | 0xe000), 0xf401, 0xf301,
    ((61) | 0xe000), 0xf402, 0xf302,
    ((62) | 0xe000), 0xf403, 0xf303,
    ((63) | 0xe000), 0xf404, 0xf304,
    ((64) | 0xe000), 0xf405, 0xf305,
    ((65) | 0xe000), 0xf406, 0xf306,
    ((66) | 0xe000), 0xf407, 0xf307,
    ((67) | 0xe000), 0xf408, 0xf308,
    ((68) | 0xe000), 0xf409, 0xf309,
    ((69) | 0xe000), 0xf30a,
};
static const keysym_t ukbd_keydesc_ru[] = {
    ((4) | 0xe000), 0x61, 0x41, 0x0444, 0x0424,
    ((5) | 0xe000), 0x62, 0x42, 0x0438, 0x0418,
    ((6) | 0xe000), 0x63, 0x43, 0x0441, 0x0421,
    ((7) | 0xe000), 0x64, 0x44, 0x0432, 0x0412,
    ((8) | 0xe000), 0x65, 0x45, 0x0443, 0x0423,
    ((9) | 0xe000), 0x66, 0x46, 0x0430, 0x0410,
    ((10) | 0xe000), 0x67, 0x47, 0x043f, 0x041f,
    ((11) | 0xe000), 0x68, 0x48, 0x0440, 0x0420,
    ((12) | 0xe000), 0x69, 0x49, 0x0448,0x0428,
    ((13) | 0xe000), 0x6a, 0x4a, 0x043e, 0x041e,
    ((14) | 0xe000), 0x6b, 0x4b, 0x043b, 0x041b,
    ((15) | 0xe000), 0x6c, 0x4c, 0x0434, 0x0414,
    ((16) | 0xe000), 0x6d, 0x4d, 0x044c,0x042c,
    ((17) | 0xe000), 0x6e, 0x4e, 0x0442, 0x0422,
    ((18) | 0xe000), 0x6f, 0x4f, 0x0449,0x0429,
    ((19) | 0xe000), 0x70, 0x50, 0x0437, 0x0417,
    ((20) | 0xe000), 0x71, 0x51, 0x0439,0x0419,
    ((21) | 0xe000), 0x72, 0x52, 0x043a, 0x041a,
    ((22) | 0xe000), 0x73, 0x53, 0x044b,0x042b,
    ((23) | 0xe000), 0x74, 0x54, 0x0435, 0x0415,
    ((24) | 0xe000), 0x75, 0x55, 0x0433, 0x0413,
    ((25) | 0xe000), 0x76, 0x56, 0x043c, 0x041c,
    ((26) | 0xe000), 0x77, 0x57, 0x0446,0x0426,
    ((27) | 0xe000), 0x78, 0x58, 0x0447,0x0427,
    ((28) | 0xe000), 0x79, 0x59, 0x043d, 0x041d,
    ((29) | 0xe000), 0x7a, 0x5a, 0x044f, 0x042f,
    ((35) | 0xe000), 0x36, 0x5e, 0x36, 0x2c,
    ((36) | 0xe000), 0x37, 0x26, 0x37, 0x2e,
    ((47) | 0xe000), 0x5b, 0x7b, 0x0445, 0x0425,
    ((48) | 0xe000), 0x5d,0x7d, 0x044a,0x042a,
    ((51) | 0xe000), 0x3b, 0x3a, 0x0436,0x0416,
    ((52) | 0xe000), 0x27, 0x22, 0x044d, 0x042d,
    ((54) | 0xe000), 0x2c, 0x3c, 0x0431, 0x0411,
    ((55) | 0xe000), 0x2e, 0x3e, 0x044e, 0x042e,
    ((56) | 0xe000), 0x2f, 0x3f, 0x0451, 0x0401,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_ua[] = {
    ((4) | 0xe000), 0x61, 0x41, 0x0444, 0x0424,
    ((5) | 0xe000), 0x62, 0x42, 0x0438, 0x0418,
    ((6) | 0xe000), 0x63, 0x43, 0x0441, 0x0421,
    ((7) | 0xe000), 0x64, 0x44, 0x0432, 0x0412,
    ((8) | 0xe000), 0x65, 0x45, 0x0443, 0x0423,
    ((9) | 0xe000), 0x66, 0x46, 0x0430, 0x0410,
    ((10) | 0xe000), 0x67, 0x47, 0x043f, 0x041f,
    ((11) | 0xe000), 0x68, 0x48, 0x0440, 0x0420,
    ((12) | 0xe000), 0x69, 0x49, 0x0448,0x0428,
    ((13) | 0xe000), 0x6a, 0x4a, 0x043e, 0x041e,
    ((14) | 0xe000), 0x6b, 0x4b, 0x043b, 0x041b,
    ((15) | 0xe000), 0x6c, 0x4c, 0x0434, 0x0414,
    ((16) | 0xe000), 0x6d, 0x4d, 0x044c,0x042c,
    ((17) | 0xe000), 0x6e, 0x4e, 0x0442, 0x0422,
    ((18) | 0xe000), 0x6f, 0x4f, 0x0449,0x0429,
    ((19) | 0xe000), 0x70, 0x50, 0x0437, 0x0417,
    ((20) | 0xe000), 0x71, 0x51, 0x0439,0x0419,
    ((21) | 0xe000), 0x72, 0x52, 0x043a, 0x041a,
    ((22) | 0xe000), 0x73, 0x53, 0x044b,0x042b,
    ((23) | 0xe000), 0x74, 0x54, 0x0435, 0x0415,
    ((24) | 0xe000), 0x75, 0x55, 0x0433, 0x0413,
    ((25) | 0xe000), 0x76, 0x56, 0x043c, 0x041c,
    ((26) | 0xe000), 0x77, 0x57, 0x0446,0x0426,
    ((27) | 0xe000), 0x78, 0x58, 0x0447,0x0427,
    ((28) | 0xe000), 0x79, 0x59, 0x043d, 0x041d,
    ((29) | 0xe000), 0x7a, 0x5a, 0x044f, 0x042f,
    ((35) | 0xe000), 0x36, 0x5e, 0x36, 0x2c,
    ((36) | 0xe000), 0x37, 0x26, 0x37, 0x2e,
    ((45) | 0xe000), 0x2d, 0x5f, 0x0456,0x0406,
    ((46) | 0xe000), 0x3d, 0x2b, 0x0454,0x0404,
    ((47) | 0xe000), 0x5b, 0x7b, 0x0445, 0x0425,
    ((48) | 0xe000), 0x5d,0x7d, 0x044a,0x042a,
    ((49) | 0xe000), 0x5c, 0x7c, 0x0457, 0x0407,
    ((50) | 0xe000), 0x5c, 0x7c, 0x0457, 0x0407,
    ((51) | 0xe000), 0x3b, 0x3a, 0x0436,0x0416,
    ((52) | 0xe000), 0x27, 0x22, 0x044d, 0x042d,
    ((53) | 0xe000), 0x60, 0x7e, 0x0491,0x0490,
    ((54) | 0xe000), 0x2c, 0x3c, 0x0431, 0x0411,
    ((55) | 0xe000), 0x2e, 0x3e, 0x044e, 0x042e,
    ((56) | 0xe000), 0x2f, 0x3f, 0x0451, 0x0401,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_sg[] = {
    ((8) | 0xe000), 0x65, 0x45, 0xa4,
    ((28) | 0xe000), 0x7a,
    ((29) | 0xe000), 0x79,
    ((30) | 0xe000), 0x31, 0x2b, 0x7c,
    ((31) | 0xe000), 0x32, 0x22, 0x40,
    ((32) | 0xe000), 0x33, 0x2a, 0x23,
    ((33) | 0xe000), 0x34, 0xe7,
    ((35) | 0xe000), 0x36, 0x26, 0xac,
    ((36) | 0xe000), 0x37, 0x2f, 0xa6,
    ((37) | 0xe000), 0x38, 0x28, 0xa2,
    ((38) | 0xe000), 0x39, 0x29,
    ((39) | 0xe000), 0x30, 0x3d,
    ((45) | 0xe000), 0x27, 0x3f, 0x0301,
    ((46) | 0xe000), 0x0302,0x0300,0x0303,
    ((47) | 0xe000), 0xfc, 0xe8, 0x5b,
    ((48) | 0xe000), 0x0308,0x21, 0x5d,
    ((49) | 0xe000), 0x24, 0xa3, 0x7d,
    ((50) | 0xe000), 0x24, 0xa3, 0x7d,
    ((51) | 0xe000), 0xf6, 0xe9,
    ((52) | 0xe000), 0xe4, 0xe0, 0x7b,
    ((53) | 0xe000), 0xa7, 0xb0, 0x030a,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e, 0x5c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_sg_nodead[] = {
    ((45) | 0xe000), 0x27, 0x3f, 0xb4,
    ((46) | 0xe000), 0x5e, 0x60, 0x7e,
    ((48) | 0xe000), 0xa8, 0x21, 0x5d,
};
static const keysym_t ukbd_keydesc_sf[] = {
    ((47) | 0xe000), 0xe8, 0xfc, 0x5b,
    ((51) | 0xe000), 0xe9, 0xf6,
    ((52) | 0xe000), 0xe0, 0xe4, 0x7b,
};
static const keysym_t ukbd_keydesc_pt[] = {
    ((31) | 0xe000), 0x32, 0x22, 0x40,
    ((32) | 0xe000), 0x33, 0x23, 0xa3,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f, 0x7b,
    ((37) | 0xe000), 0x38, 0x28, 0x5b,
    ((38) | 0xe000), 0x39, 0x29, 0x5d,
    ((39) | 0xe000), 0x30, 0x3d, 0x7d,
    ((45) | 0xe000), 0x27, 0x3f,
    ((46) | 0xe000), 0x3c, 0x3e,
    ((47) | 0xe000), 0x2b, 0x2a,
    ((48) | 0xe000), 0x0301, 0x0300,
    ((49) | 0xe000), 0x0303, 0x0302,
    ((50) | 0xe000), 0x0303, 0x0302,
    ((51) | 0xe000), 0xe7, 0xc7,
    ((52) | 0xe000), 0xba, 0xaa,
    ((53) | 0xe000), 0x5c, 0x7c,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_pt_apple[] = {
    ((46) | 0xe000), 0x2b, 0x2a,
    ((47) | 0xe000), 0xba, 0xaa,
    ((50) | 0xe000), 0x5c, 0x7c,
    ((52) | 0xe000), 0x0303, 0x0302
};
static const keysym_t ukbd_keydesc_la[] = {
    ((20) | 0xe000), 0x71, 0x51, 0x40,
    ((30) | 0xe000), 0x31, 0x21,
    ((31) | 0xe000), 0x32, 0x22,
    ((32) | 0xe000), 0x33, 0x23,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f,
    ((37) | 0xe000), 0x38, 0x28,
    ((38) | 0xe000), 0x39, 0x29,
    ((39) | 0xe000), 0x30, 0x3d,
    ((45) | 0xe000), 0x27, 0x3f, 0x5c,
    ((46) | 0xe000), 0xbf,0xa1,
    ((47) | 0xe000), 0x0301, 0x0308,
    ((48) | 0xe000), 0x2b, 0x2a, 0x7e,
    ((49) | 0xe000), 0x7d, 0x5d,0x0300,
    ((50) | 0xe000), 0x7d, 0x5d,0x0300,
    ((51) | 0xe000), 0xf1,
    ((52) | 0xe000), 0x7b, 0x5b, 0x0302,
    ((53) | 0xe000), 0x7c, 0xb0, 0xac,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_br[] = {
    ((30) | 0xe000), 0x31, 0x21, 0xb9,
    ((31) | 0xe000), 0x32, 0x40, 0xb2,
    ((32) | 0xe000), 0x33, 0x23, 0xb3,
    ((33) | 0xe000), 0x34, 0x24, 0xa3,
    ((34) | 0xe000), 0x35, 0x25, 0xa2,
    ((35) | 0xe000), 0x36, 0x0308,0xac,
    ((46) | 0xe000), 0x3d, 0x2b, 0xa7,
    ((47) | 0xe000), 0x0301, 0x0300,
    ((48) | 0xe000), 0x5b, 0x7b, 0xaa,
    ((49) | 0xe000), 0x5d,0x7d, 0xba,
    ((50) | 0xe000), 0x5d,0x7d, 0xba,
    ((51) | 0xe000), 0xe7, 0xc7,
    ((52) | 0xe000), 0x0303, 0x0302,
    ((53) | 0xe000), 0x27, 0x22,
    ((56) | 0xe000), 0x3b, 0x3a,
    ((99) | 0xe000), 0xf29f, 0xf22e,
    ((100) | 0xe000), 0x5c, 0x7c,
    ((135) | 0xe000), 0x2f, 0x3f, 0xb0,
};
static const keysym_t ukbd_keydesc_tr[] = {
    ((12) | 0xe000), 0x0131, 0x49,
    ((20) | 0xe000), 0x71, 0x51, 0x40,
    ((31) | 0xe000), 0x32, 0x27, 0xa3,
    ((32) | 0xe000), 0x33, 0x5e, 0x23,
    ((33) | 0xe000), 0x34, 0x2b, 0x24,
    ((34) | 0xe000), 0x35, 0x25, 0xbd,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f, 0x7b,
    ((37) | 0xe000), 0x38, 0x28, 0x5b,
    ((38) | 0xe000), 0x39, 0x29, 0x5d,
    ((39) | 0xe000), 0x30, 0x3d, 0x7d,
    ((45) | 0xe000), 0x2a, 0x3f, 0x5c,
    ((46) | 0xe000), 0x2d, 0x5f,
    ((47) | 0xe000), 0x011f, 0x011e, 0x0308,
    ((48) | 0xe000), 0xfc, 0xdc, 0x7e,
    ((49) | 0xe000), 0x2c, 0x3b, 0x0300,
    ((50) | 0xe000), 0x2c, 0x3b, 0x0300,
    ((51) | 0xe000), 0x015f, 0x015e, 0x0301,
    ((52) | 0xe000), 0x69, 0x0130,
    ((53) | 0xe000), 0x22, 0xe9,
    ((54) | 0xe000), 0xf6, 0xd6,
    ((55) | 0xe000), 0xe7, 0xc7,
    ((56) | 0xe000), 0x2e, 0x3a,
    ((100) | 0xe000), 0x3c, 0x3e, 0x7c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_tr_nodead[] = {
    ((47) | 0xe000), 0x011f, 0x011e,
    ((49) | 0xe000), 0x2c, 0x3b, 0x60,
    ((50) | 0xe000), 0x2c, 0x3b, 0x60,
    ((51) | 0xe000), 0x015f, 0x015e, 0x27,
};
static const keysym_t ukbd_keydesc_pl[] = {
    ((4) | 0xe000), 0x61, 0x41, 0x0105, 0x0104,
    ((6) | 0xe000), 0x63, 0x43, 0x0107, 0x0106,
    ((8) | 0xe000), 0x65, 0x45, 0x0119, 0x0118,
    ((15) | 0xe000), 0x6c, 0x4c, 0x0142, 0x0141,
    ((17) | 0xe000), 0x6e, 0x4e, 0x0144, 0x0143,
    ((18) | 0xe000), 0x6f, 0x4f, 0xf3, 0xd3,
    ((22) | 0xe000), 0x73, 0x53, 0x015b, 0x015a,
    ((27) | 0xe000), 0x78, 0x58, 0x017a, 0x0179,
    ((29) | 0xe000), 0x7a, 0x5a, 0x017c,0x017b,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_hu[] = {
    ((5) | 0xe000), 0x62, 0x42, 0x7b,
    ((6) | 0xe000), 0x63, 0x43, 0x26,
    ((9) | 0xe000), 0x66, 0x46, 0x5b,
    ((10) | 0xe000), 0x67, 0x47, 0x5d,
    ((12) | 0xe000), 0x69, 0x49, 0xed,
    ((13) | 0xe000), 0x6a, 0x4a, 0xed,
    ((17) | 0xe000), 0x6e, 0x4e, 0x7d,
    ((20) | 0xe000), 0x71, 0x51, 0x5c,
    ((25) | 0xe000), 0x76, 0x56, 0x40,
    ((26) | 0xe000), 0x77, 0x57,0x7c,
    ((27) | 0xe000), 0x78, 0x58, 0x23,
    ((28) | 0xe000), 0x7a, 0x5a,
    ((29) | 0xe000), 0x79, 0x59, 0x3e,
    ((30) | 0xe000), 0x31, 0x27, 0x7e,
    ((31) | 0xe000), 0x32, 0x22,
    ((32) | 0xe000), 0x33, 0x2b, 0x5e,
    ((33) | 0xe000), 0x34, 0x21,
    ((34) | 0xe000), 0x35, 0x25,
    ((35) | 0xe000), 0x36, 0x2f,
    ((36) | 0xe000), 0x37, 0x3d,0x60,
    ((37) | 0xe000), 0x38, 0x28,
    ((38) | 0xe000), 0x39, 0x29, 0xb4,
    ((39) | 0xe000), 0xf6, 0xd6,
    ((45) | 0xe000), 0xfc, 0xdc,
    ((46) | 0xe000), 0xf3, 0xd3,
    ((47) | 0xe000), 0x0151,0x0150,0xf7,
    ((48) | 0xe000), 0xfa, 0xda, 0xd7,
    ((49) | 0xe000), 0x0171,0x0170,0xa4,
    ((50) | 0xe000), 0x0171,0x0170,0xa4,
    ((51) | 0xe000), 0xe9, 0xc9, 0x24,
    ((52) | 0xe000), 0xe1, 0xc1, 0xdf,
    ((53) | 0xe000), 0x30, 0xa7,
    ((54) | 0xe000), 0x2c, 0x3f, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f, 0x2a,
    ((100) | 0xe000), 0xed, 0xcd, 0x3c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_si[]=
{
    ((5) | 0xe000), 0x62, 0x42, 0x7b,
    ((9) | 0xe000), 0x66, 0x46, 0x5b,
    ((10) | 0xe000), 0x67, 0x47, 0x5d,
    ((14) | 0xe000), 0x6b, 0x4b, 0x0142,
    ((15) | 0xe000), 0x6c, 0x4c, 0x0141,
    ((16) | 0xe000), 0x6d, 0x4d, 0xa7,
    ((17) | 0xe000), 0x6e, 0x4e, 0x7d,
    ((20) | 0xe000), 0x71, 0x51, 0x5c,
    ((25) | 0xe000), 0x76, 0x56, 0x40,
    ((26) | 0xe000), 0x77, 0x57, 0x7c,
    ((28) | 0xe000), 0x7a, 0x5a,
    ((29) | 0xe000), 0x79, 0x59,
    ((30) | 0xe000), 0x31, 0x21, 0x7e,
    ((31) | 0xe000), 0x32, 0x22, 0x02c7,
    ((32) | 0xe000), 0x33, 0x23, 0x5e,
    ((33) | 0xe000), 0x34, 0x24, 0x02d8,
    ((34) | 0xe000), 0x35, 0x25, 0xb0,
    ((35) | 0xe000), 0x36, 0x26, 0x02db,
    ((36) | 0xe000), 0x37, 0x2f, 0x60,
    ((37) | 0xe000), 0x38, 0x28, 0x02d9,
    ((38) | 0xe000), 0x39, 0x29, 0xb4,
    ((39) | 0xe000), 0x30, 0x3d, 0x02dd,
    ((45) | 0xe000), 0x27, 0x3f, 0xa8,
    ((46) | 0xe000), 0x2b, 0x2a, 0xb8,
    ((47) | 0xe000), 0x0161, 0x0160, 0xf7,
    ((48) | 0xe000), 0x0111, 0x0110, 0xd7,
    ((49) | 0xe000), 0x017e, 0x017d, 0xa4,
    ((50) | 0xe000), 0x017e, 0x017d, 0xa4,
    ((51) | 0xe000), 0x010d, 0x010c,
    ((52) | 0xe000), 0x0107, 0x0106, 0xdf,
    ((53) | 0xe000), 0xb8, 0xa8,
    ((54) | 0xe000), 0x2c, 0x3b, 0x3c,
    ((55) | 0xe000), 0x2e, 0x3a, 0x3e,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_cf[] = {
    ((16) | 0xe000), 0x6d, 0x4d, 0xb5,
    ((18) | 0xe000), 0x6f, 0x4f, 0xa7,
    ((19) | 0xe000), 0x70, 0x50, 0xb6,
    ((30) | 0xe000), 0x31, 0x21, 0xb1,
    ((31) | 0xe000), 0x32, 0x22, 0x40,
    ((32) | 0xe000), 0x33, 0x2f, 0xa3,
    ((33) | 0xe000), 0x34, 0x24, 0xa2,
    ((34) | 0xe000), 0x35, 0x25, 0xa8,
    ((35) | 0xe000), 0x36, 0x3f, 0xaf,
    ((36) | 0xe000), 0x37, 0x26, 0xa6,
    ((37) | 0xe000), 0x38, 0x2a, 0xb2,
    ((38) | 0xe000), 0x39, 0x28, 0xb3,
    ((39) | 0xe000), 0x30, 0x29, 0xbc,
    ((45) | 0xe000), 0x2d, 0x5f, 0xbd,
    ((46) | 0xe000), 0x3d, 0x2b, 0xbe,
    ((47) | 0xe000), 0x0302,0x0302,0x5b,
    ((48) | 0xe000), 0x0327,0x0308,0x5d,
    ((49) | 0xe000), 0x3c, 0x3e, 0x7d,
    ((50) | 0xe000), 0x3c, 0x3e, 0x7d,
    ((51) | 0xe000), 0x3b, 0x3a, 0x7e,
    ((52) | 0xe000), 0x0300, 0x0300, 0x7b,
    ((53) | 0xe000), 0x23, 0x7c, 0x5c,
    ((54) | 0xe000), 0x2c, 0x27, 0xad,
    ((55) | 0xe000), 0x2e, 0x2e,
    ((56) | 0xe000), 0xe9, 0xc9, 0x0301,
    ((100) | 0xe000), 0xab,0xbb,0xb0,
    ((230) | 0xe000), 0xf10a,0xf109,
};
static const keysym_t ukbd_keydesc_cf_nodead[] = {
    ((47) | 0xe000), 0x5e,0x5e,0x5b,
    ((48) | 0xe000), 0xb8, 0xa8, 0x5d,
    ((52) | 0xe000), 0x60, 0x60, 0x7b,
    ((56) | 0xe000), 0xe9, 0xc9, 0xb4,
};
static const keysym_t ukbd_keydesc_lv[] = {
    ((4) | 0xe000), 0x61, 0x41, 0x0101, 0x0100,
    ((6) | 0xe000), 0x63, 0x43, 0x010d, 0x010c,
    ((8) | 0xe000), 0x65, 0x45, 0x0113, 0x0112,
    ((10) | 0xe000), 0x67, 0x47, 0x0123, 0x0122,
    ((12) | 0xe000), 0x69, 0x49, 0x012b, 0x012a,
    ((14) | 0xe000), 0x6b, 0x4b, 0x0137, 0x0136,
    ((15) | 0xe000), 0x6c, 0x4c, 0x013c, 0x013b,
    ((17) | 0xe000), 0x6e, 0x4e, 0x0146, 0x0145,
    ((18) | 0xe000), 0x6f, 0x4f, 0x014d, 0x014c,
    ((22) | 0xe000), 0x73, 0x53, 0x0161, 0x0160,
    ((24) | 0xe000), 0x75, 0x55, 0x016b, 0x016a,
    ((29) | 0xe000), 0x7a, 0x5a, 0x017e, 0x017d,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_nl[] = {
    ((6) | 0xe000), 0x63, 0x43, 0xa2,
    ((16) | 0xe000), 0x6d, 0x4d, 0xb5,
    ((21) | 0xe000), 0x72, 0x52, 0xb6,
    ((22) | 0xe000), 0x73, 0x53, 0xdf,
    ((27) | 0xe000), 0x78, 0x58, 0xbb,
    ((29) | 0xe000), 0x7a, 0x5a, 0xab,
    ((30) | 0xe000), 0x31, 0x21, 0xb9,
    ((31) | 0xe000), 0x32, 0x22, 0xb2,
    ((32) | 0xe000), 0x33, 0x23, 0xb3,
    ((33) | 0xe000), 0x34, 0x24, 0xbc,
    ((34) | 0xe000), 0x35, 0x25, 0xbd,
    ((35) | 0xe000), 0x36, 0x26, 0xbe,
    ((36) | 0xe000), 0x37, 0x5f, 0xa3,
    ((37) | 0xe000), 0x38, 0x28, 0x7b,
    ((38) | 0xe000), 0x39, 0x29, 0x7d,
    ((39) | 0xe000), 0x30, 0x27,
    ((45) | 0xe000), 0x2f, 0x3f, 0x5c,
    ((46) | 0xe000), 0xb0, 0x0303, 0x0327,
    ((47) | 0xe000), 0x0308,0x0302,
    ((48) | 0xe000), 0x2a, 0x7c,
    ((49) | 0xe000), 0x3c, 0x3e,
    ((50) | 0xe000), 0x3c, 0x3e,
    ((51) | 0xe000), 0x2b, 0xb1,
    ((52) | 0xe000), 0x0301, 0x0300,
    ((53) | 0xe000), 0x40, 0xa7, 0xac,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a, 0xb7,
    ((56) | 0xe000), 0x2d, 0x3d,
    ((100) | 0xe000), 0x5d,0x5b, 0xa6,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_nl_nodead[] = {
    ((46) | 0xe000), 0xb0, 0x7e, 0xb8,
    ((47) | 0xe000), 0x22, 0x5e,
    ((52) | 0xe000), 0x27, 0x60,
};
static const keysym_t ukbd_keydesc_is[] = {
    ((8) | 0xe000), 0x65, 0x45,
    ((20) | 0xe000), 0x71, 0x51, 0x40,
    ((31) | 0xe000), 0x32, 0x22,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f, 0x7b,
    ((37) | 0xe000), 0x38, 0x28, 0x5b,
    ((38) | 0xe000), 0x39, 0x29, 0x5d,
    ((39) | 0xe000), 0x30, 0x3d, 0x7d,
    ((45) | 0xe000), 0xf6, 0xd6, 0x5c,
    ((46) | 0xe000), 0x2d, 0x5f,
    ((47) | 0xe000), 0xf0,
    ((48) | 0xe000), 0x27, 0x3f, 0x7e,
    ((49) | 0xe000), 0x2b, 0x2a, 0x60,
    ((50) | 0xe000), 0x2b, 0x2a, 0x60,
    ((51) | 0xe000), 0xe6,
    ((52) | 0xe000), 0x0301, 0x0308,0x0302,
    ((53) | 0xe000), 0xb0, 0xa8,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0xfe,
    ((100) | 0xe000), 0x3c, 0x3e, 0x7c,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_is_nodead[] = {
    ((52) | 0xe000), 0xb4, 0xa8, 0x5e,
};
static const keysym_t ukbd_keydesc_ee[] = {
    ((22) | 0xe000), 0x73, 0x53, 0x0161, 0x0160,
    ((29) | 0xe000), 0x7a, 0x5a, 0x017e, 0x017d,
    ((31) | 0xe000), 0x32, 0x22, 0x40,
    ((32) | 0xe000), 0x33, 0x23, 0xa3,
    ((33) | 0xe000), 0x34, 0xa4, 0x24,
    ((35) | 0xe000), 0x36, 0x26,
    ((36) | 0xe000), 0x37, 0x2f, 0x7b,
    ((37) | 0xe000), 0x38, 0x28, 0x5b,
    ((38) | 0xe000), 0x39, 0x29, 0x5d,
    ((39) | 0xe000), 0x30, 0x3d, 0x7d,
    ((45) | 0xe000), 0x2b, 0x3f, 0x5c,
    ((46) | 0xe000), 0x0301, 0x0300,
    ((47) | 0xe000), 0xfc,
    ((48) | 0xe000), 0xf5, 0xd5, 0xa7,
    ((49) | 0xe000), 0x27, 0x2a, 0xbd,
    ((50) | 0xe000), 0x27, 0x2a, 0xbd,
    ((51) | 0xe000), 0xf6,
    ((52) | 0xe000), 0xe4, 0xc4, 0x0302,
    ((53) | 0xe000), 0x0328, 0x0303,
    ((54) | 0xe000), 0x2c, 0x3b,
    ((55) | 0xe000), 0x2e, 0x3a,
    ((56) | 0xe000), 0x2d, 0x5f,
    ((100) | 0xe000), 0x3c, 0x3e, 0x7c, 0xa6,
    ((230) | 0xe000), 0xf10a, 0xf109,
};
static const keysym_t ukbd_keydesc_ee_nodead[] = {
    ((46) | 0xe000), 0x27, 0x60,
    ((52) | 0xe000), 0xe4, 0xc4, 0x5e,
    ((53) | 0xe000), 0x02c7, 0x7e,
};
const struct wscons_keydesc ukbd_keydesctab[] = {
 { 0x0200, 0, sizeof(ukbd_keydesc_us)/sizeof(keysym_t), ukbd_keydesc_us },
 { 0x0300, 0x0200, sizeof(ukbd_keydesc_de)/sizeof(keysym_t), ukbd_keydesc_de },
 { 0x0300 | 0x00000001, 0x0300, sizeof(ukbd_keydesc_de_nodead)/sizeof(keysym_t), ukbd_keydesc_de_nodead },
 { 0x0600, 0x0200, sizeof(ukbd_keydesc_fr)/sizeof(keysym_t), ukbd_keydesc_fr },
 { 0x0600 | 0x00010000, 0x0600, sizeof(ukbd_keydesc_fr_apple)/sizeof(keysym_t), ukbd_keydesc_fr_apple },
 { 0x0600 | 0x00000010, 0x0200, sizeof(ukbd_keydesc_fr_dvorak_bepo)/sizeof(keysym_t), ukbd_keydesc_fr_dvorak_bepo },
 { 0x0400, 0x0200, sizeof(ukbd_keydesc_dk)/sizeof(keysym_t), ukbd_keydesc_dk },
 { 0x0400 | 0x00000001, 0x0400, sizeof(ukbd_keydesc_dk_nodead)/sizeof(keysym_t), ukbd_keydesc_dk_nodead },
 { 0x0500, 0x0200, sizeof(ukbd_keydesc_it)/sizeof(keysym_t), ukbd_keydesc_it },
 { 0x0700, 0x0200, sizeof(ukbd_keydesc_uk)/sizeof(keysym_t), ukbd_keydesc_uk },
 { 0x0800, 0x0200, sizeof(ukbd_keydesc_jp)/sizeof(keysym_t), ukbd_keydesc_jp },
 { 0x0900, 0x0400, sizeof(ukbd_keydesc_sv)/sizeof(keysym_t), ukbd_keydesc_sv },
 { 0x0900 | 0x00000001, 0x0900, sizeof(ukbd_keydesc_sv_nodead)/sizeof(keysym_t), ukbd_keydesc_sv_nodead },
 { 0x0a00, 0x0400, sizeof(ukbd_keydesc_no)/sizeof(keysym_t), ukbd_keydesc_no },
 { 0x0a00 | 0x00000001, 0x0a00, sizeof(ukbd_keydesc_no_nodead)/sizeof(keysym_t), ukbd_keydesc_no_nodead },
 { 0x0200 | 0x00000010, 0x0200, sizeof(ukbd_keydesc_us_dvorak)/sizeof(keysym_t), ukbd_keydesc_us_dvorak },
 { 0x0200 | 0x00000008, 0x0200, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0200 | 0x00000040, 0x0200, sizeof(ukbd_keydesc_iopener)/sizeof(keysym_t), ukbd_keydesc_iopener },
 { 0x0700 | 0x00000008, 0x0700, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0800 | 0x00000008, 0x0800, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0600 | 0x00000008, 0x0600, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0600 | 0x00010000 | 0x00000008, 0x0600 | 0x00010000, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0600 | 0x00000010 | 0x00000008, 0x0600 | 0x00000010, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0d00 | 0x00000008, 0x0d00, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0200 | 0x00000010 | 0x00000008, 0x0200 | 0x00000010, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0200 | 0x00000040 | 0x00000008, 0x0200 | 0x00000040, sizeof(ukbd_keydesc_swapctrlcaps)/sizeof(keysym_t), ukbd_keydesc_swapctrlcaps },
 { 0x0b00, 0x0200, sizeof(ukbd_keydesc_es)/sizeof(keysym_t), ukbd_keydesc_es },
 { 0x0d00, 0x0200, sizeof(ukbd_keydesc_be)/sizeof(keysym_t), ukbd_keydesc_be },
 { 0x0e00, 0x0200, sizeof(ukbd_keydesc_ru)/sizeof(keysym_t), ukbd_keydesc_ru },
 { 0x1200, 0x0200, sizeof(ukbd_keydesc_ua)/sizeof(keysym_t), ukbd_keydesc_ua },
 { 0x0f00, 0x0200, sizeof(ukbd_keydesc_sg)/sizeof(keysym_t), ukbd_keydesc_sg },
 { 0x0f00 | 0x00000001, 0x0f00, sizeof(ukbd_keydesc_sg_nodead)/sizeof(keysym_t), ukbd_keydesc_sg_nodead },
 { 0x1000, 0x0f00, sizeof(ukbd_keydesc_sf)/sizeof(keysym_t), ukbd_keydesc_sf },
 { 0x1000 | 0x00000001, 0x1000, sizeof(ukbd_keydesc_sg_nodead)/sizeof(keysym_t), ukbd_keydesc_sg_nodead },
 { 0x1100, 0x0200, sizeof(ukbd_keydesc_pt)/sizeof(keysym_t), ukbd_keydesc_pt },
 { 0x1100 | 0x00010000, 0x1100, sizeof(ukbd_keydesc_pt_apple)/sizeof(keysym_t), ukbd_keydesc_pt_apple },
 { 0x1300, 0x0200, sizeof(ukbd_keydesc_lt)/sizeof(keysym_t), ukbd_keydesc_lt },
 { 0x1400, 0x0200, sizeof(ukbd_keydesc_la)/sizeof(keysym_t), ukbd_keydesc_la },
 { 0x1500, 0x0200, sizeof(ukbd_keydesc_br)/sizeof(keysym_t), ukbd_keydesc_br },
 { 0x1700, 0x0200, sizeof(ukbd_keydesc_tr)/sizeof(keysym_t), ukbd_keydesc_tr },
 { 0x1700 | 0x00000001, 0x1700, sizeof(ukbd_keydesc_tr_nodead)/sizeof(keysym_t), ukbd_keydesc_tr_nodead },
 { 0x1800, 0x0200, sizeof(ukbd_keydesc_pl)/sizeof(keysym_t), ukbd_keydesc_pl },
 { 0x0c00, 0x0200, sizeof(ukbd_keydesc_hu)/sizeof(keysym_t), ukbd_keydesc_hu },
 { 0x1900, 0x0200, sizeof(ukbd_keydesc_si)/sizeof(keysym_t), ukbd_keydesc_si },
 { 0x1a00, 0x0200, sizeof(ukbd_keydesc_cf)/sizeof(keysym_t), ukbd_keydesc_cf },
 { 0x1a00 | 0x00000001, 0x1a00, sizeof(ukbd_keydesc_cf_nodead)/sizeof(keysym_t), ukbd_keydesc_cf_nodead },
 { 0x1b00, 0x0200, sizeof(ukbd_keydesc_lv)/sizeof(keysym_t), ukbd_keydesc_lv },
 { 0x1600, 0x0200, sizeof(ukbd_keydesc_nl)/sizeof(keysym_t), ukbd_keydesc_nl },
 { 0x1600 | 0x00000001, 0x1600, sizeof(ukbd_keydesc_nl_nodead)/sizeof(keysym_t), ukbd_keydesc_nl_nodead },
 { 0x1c00, 0x0200, sizeof(ukbd_keydesc_is)/sizeof(keysym_t), ukbd_keydesc_is },
 { 0x1c00 | 0x00000001, 0x1c00, sizeof(ukbd_keydesc_is_nodead)/sizeof(keysym_t), ukbd_keydesc_is_nodead },
 { 0x1d00, 0x0200, sizeof(ukbd_keydesc_ee)/sizeof(keysym_t), ukbd_keydesc_ee },
 { 0x1d00 | 0x00000001, 0x1d00, sizeof(ukbd_keydesc_ee_nodead)/sizeof(keysym_t), ukbd_keydesc_ee_nodead },
 {0, 0, 0, 0}
};
