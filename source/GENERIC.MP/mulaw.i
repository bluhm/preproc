typedef struct label_t {
 long val[2];
} label_t;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;
typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;
typedef __int32_t __int_fast8_t;
typedef __uint32_t __uint_fast8_t;
typedef __int32_t __int_fast16_t;
typedef __uint32_t __uint_fast16_t;
typedef __int32_t __int_fast32_t;
typedef __uint32_t __uint_fast32_t;
typedef __int64_t __int_fast64_t;
typedef __uint64_t __uint_fast64_t;
typedef long __intptr_t;
typedef unsigned long __uintptr_t;
typedef __int64_t __intmax_t;
typedef __uint64_t __uintmax_t;
typedef long __register_t;
typedef unsigned long __vaddr_t;
typedef unsigned long __paddr_t;
typedef unsigned long __vsize_t;
typedef unsigned long __psize_t;
typedef double __double_t;
typedef float __float_t;
typedef long __ptrdiff_t;
typedef unsigned long __size_t;
typedef long __ssize_t;
typedef __builtin_va_list __va_list;
typedef int __wchar_t;
typedef int __wint_t;
typedef int __rune_t;
typedef void * __wctrans_t;
typedef void * __wctype_t;
typedef __int64_t __blkcnt_t;
typedef __int32_t __blksize_t;
typedef __int64_t __clock_t;
typedef __int32_t __clockid_t;
typedef unsigned long __cpuid_t;
typedef __int32_t __dev_t;
typedef __uint32_t __fixpt_t;
typedef __uint64_t __fsblkcnt_t;
typedef __uint64_t __fsfilcnt_t;
typedef __uint32_t __gid_t;
typedef __uint32_t __id_t;
typedef __uint32_t __in_addr_t;
typedef __uint16_t __in_port_t;
typedef __uint64_t __ino_t;
typedef long __key_t;
typedef __uint32_t __mode_t;
typedef __uint32_t __nlink_t;
typedef __int64_t __off_t;
typedef __int32_t __pid_t;
typedef __uint64_t __rlim_t;
typedef __uint8_t __sa_family_t;
typedef __int32_t __segsz_t;
typedef __uint32_t __socklen_t;
typedef long __suseconds_t;
typedef __int32_t __swblk_t;
typedef __int64_t __time_t;
typedef __int32_t __timer_t;
typedef __uint32_t __uid_t;
typedef __uint32_t __useconds_t;
typedef union {
 char __mbstate8[128];
 __int64_t __mbstateL;
} __mbstate_t;
static inline __uint16_t
__mswap16(volatile const __uint16_t *m)
{
 __uint16_t v;
 __asm("lduha [%1] %2, %0 ! %3"
     : "=r" (v)
     : "r" (m), "n" (0x88), "m" (*m));
 return (v);
}
static inline __uint32_t
__mswap32(volatile const __uint32_t *m)
{
 __uint32_t v;
 __asm("lduwa [%1] %2, %0 ! %3"
     : "=r" (v)
     : "r" (m), "n" (0x88), "m" (*m));
 return (v);
}
static inline __uint64_t
__mswap64(volatile const __uint64_t *m)
{
 __uint64_t v;
 __asm("ldxa [%1] %2, %0 ! %3"
     : "=r" (v)
     : "r" (m), "n" (0x88), "m" (*m));
 return (v);
}
static inline void
__swapm16(volatile __uint16_t *m, __uint16_t v)
{
 __asm("stha %1, [%2] %3 ! %0"
     : "=m" (*m)
     : "r" (v), "r" (m), "n" (0x88));
}
static inline void
__swapm32(volatile __uint32_t *m, __uint32_t v)
{
 __asm("stwa %1, [%2] %3 ! %0"
     : "=m" (*m)
     : "r" (v), "r" (m), "n" (0x88));
}
static inline void
__swapm64(volatile __uint64_t *m, __uint64_t v)
{
 __asm("stxa %1, [%2] %3 ! %0"
     : "=m" (*m)
     : "r" (v), "r" (m), "n" (0x88));
}
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;
typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
typedef __cpuid_t cpuid_t;
typedef __register_t register_t;
typedef __int8_t int8_t;
typedef __uint8_t uint8_t;
typedef __int16_t int16_t;
typedef __uint16_t uint16_t;
typedef __int32_t int32_t;
typedef __uint32_t uint32_t;
typedef __int64_t int64_t;
typedef __uint64_t uint64_t;
typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;
typedef __int64_t quad_t;
typedef __uint64_t u_quad_t;
typedef __vaddr_t vaddr_t;
typedef __paddr_t paddr_t;
typedef __vsize_t vsize_t;
typedef __psize_t psize_t;
typedef __blkcnt_t blkcnt_t;
typedef __blksize_t blksize_t;
typedef char * caddr_t;
typedef __int32_t daddr32_t;
typedef __int64_t daddr_t;
typedef __dev_t dev_t;
typedef __fixpt_t fixpt_t;
typedef __gid_t gid_t;
typedef __id_t id_t;
typedef __ino_t ino_t;
typedef __key_t key_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __rlim_t rlim_t;
typedef __segsz_t segsz_t;
typedef __swblk_t swblk_t;
typedef __uid_t uid_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
typedef __clock_t clock_t;
typedef __clockid_t clockid_t;
typedef __pid_t pid_t;
typedef __size_t size_t;
typedef __ssize_t ssize_t;



typedef __time_t time_t;




typedef __timer_t timer_t;




typedef __off_t off_t;
struct proc;
struct pgrp;
struct ucred;
struct rusage;
struct file;
struct buf;
struct tty;
struct uio;
void mulaw_to_slinear8(u_char *, int);
void slinear8_to_mulaw(u_char *, int);
void mulaw24_to_slinear24(u_char *, int);
void slinear24_to_mulaw24(u_char *, int);
static const u_char mulawtolin16[256][2] = {
 {0x02,0x84}, {0x06,0x84}, {0x0a,0x84}, {0x0e,0x84},
 {0x12,0x84}, {0x16,0x84}, {0x1a,0x84}, {0x1e,0x84},
 {0x22,0x84}, {0x26,0x84}, {0x2a,0x84}, {0x2e,0x84},
 {0x32,0x84}, {0x36,0x84}, {0x3a,0x84}, {0x3e,0x84},
 {0x41,0x84}, {0x43,0x84}, {0x45,0x84}, {0x47,0x84},
 {0x49,0x84}, {0x4b,0x84}, {0x4d,0x84}, {0x4f,0x84},
 {0x51,0x84}, {0x53,0x84}, {0x55,0x84}, {0x57,0x84},
 {0x59,0x84}, {0x5b,0x84}, {0x5d,0x84}, {0x5f,0x84},
 {0x61,0x04}, {0x62,0x04}, {0x63,0x04}, {0x64,0x04},
 {0x65,0x04}, {0x66,0x04}, {0x67,0x04}, {0x68,0x04},
 {0x69,0x04}, {0x6a,0x04}, {0x6b,0x04}, {0x6c,0x04},
 {0x6d,0x04}, {0x6e,0x04}, {0x6f,0x04}, {0x70,0x04},
 {0x70,0xc4}, {0x71,0x44}, {0x71,0xc4}, {0x72,0x44},
 {0x72,0xc4}, {0x73,0x44}, {0x73,0xc4}, {0x74,0x44},
 {0x74,0xc4}, {0x75,0x44}, {0x75,0xc4}, {0x76,0x44},
 {0x76,0xc4}, {0x77,0x44}, {0x77,0xc4}, {0x78,0x44},
 {0x78,0xa4}, {0x78,0xe4}, {0x79,0x24}, {0x79,0x64},
 {0x79,0xa4}, {0x79,0xe4}, {0x7a,0x24}, {0x7a,0x64},
 {0x7a,0xa4}, {0x7a,0xe4}, {0x7b,0x24}, {0x7b,0x64},
 {0x7b,0xa4}, {0x7b,0xe4}, {0x7c,0x24}, {0x7c,0x64},
 {0x7c,0x94}, {0x7c,0xb4}, {0x7c,0xd4}, {0x7c,0xf4},
 {0x7d,0x14}, {0x7d,0x34}, {0x7d,0x54}, {0x7d,0x74},
 {0x7d,0x94}, {0x7d,0xb4}, {0x7d,0xd4}, {0x7d,0xf4},
 {0x7e,0x14}, {0x7e,0x34}, {0x7e,0x54}, {0x7e,0x74},
 {0x7e,0x8c}, {0x7e,0x9c}, {0x7e,0xac}, {0x7e,0xbc},
 {0x7e,0xcc}, {0x7e,0xdc}, {0x7e,0xec}, {0x7e,0xfc},
 {0x7f,0x0c}, {0x7f,0x1c}, {0x7f,0x2c}, {0x7f,0x3c},
 {0x7f,0x4c}, {0x7f,0x5c}, {0x7f,0x6c}, {0x7f,0x7c},
 {0x7f,0x88}, {0x7f,0x90}, {0x7f,0x98}, {0x7f,0xa0},
 {0x7f,0xa8}, {0x7f,0xb0}, {0x7f,0xb8}, {0x7f,0xc0},
 {0x7f,0xc8}, {0x7f,0xd0}, {0x7f,0xd8}, {0x7f,0xe0},
 {0x7f,0xe8}, {0x7f,0xf0}, {0x7f,0xf8}, {0x80,0x00},
 {0xfd,0x7c}, {0xf9,0x7c}, {0xf5,0x7c}, {0xf1,0x7c},
 {0xed,0x7c}, {0xe9,0x7c}, {0xe5,0x7c}, {0xe1,0x7c},
 {0xdd,0x7c}, {0xd9,0x7c}, {0xd5,0x7c}, {0xd1,0x7c},
 {0xcd,0x7c}, {0xc9,0x7c}, {0xc5,0x7c}, {0xc1,0x7c},
 {0xbe,0x7c}, {0xbc,0x7c}, {0xba,0x7c}, {0xb8,0x7c},
 {0xb6,0x7c}, {0xb4,0x7c}, {0xb2,0x7c}, {0xb0,0x7c},
 {0xae,0x7c}, {0xac,0x7c}, {0xaa,0x7c}, {0xa8,0x7c},
 {0xa6,0x7c}, {0xa4,0x7c}, {0xa2,0x7c}, {0xa0,0x7c},
 {0x9e,0xfc}, {0x9d,0xfc}, {0x9c,0xfc}, {0x9b,0xfc},
 {0x9a,0xfc}, {0x99,0xfc}, {0x98,0xfc}, {0x97,0xfc},
 {0x96,0xfc}, {0x95,0xfc}, {0x94,0xfc}, {0x93,0xfc},
 {0x92,0xfc}, {0x91,0xfc}, {0x90,0xfc}, {0x8f,0xfc},
 {0x8f,0x3c}, {0x8e,0xbc}, {0x8e,0x3c}, {0x8d,0xbc},
 {0x8d,0x3c}, {0x8c,0xbc}, {0x8c,0x3c}, {0x8b,0xbc},
 {0x8b,0x3c}, {0x8a,0xbc}, {0x8a,0x3c}, {0x89,0xbc},
 {0x89,0x3c}, {0x88,0xbc}, {0x88,0x3c}, {0x87,0xbc},
 {0x87,0x5c}, {0x87,0x1c}, {0x86,0xdc}, {0x86,0x9c},
 {0x86,0x5c}, {0x86,0x1c}, {0x85,0xdc}, {0x85,0x9c},
 {0x85,0x5c}, {0x85,0x1c}, {0x84,0xdc}, {0x84,0x9c},
 {0x84,0x5c}, {0x84,0x1c}, {0x83,0xdc}, {0x83,0x9c},
 {0x83,0x6c}, {0x83,0x4c}, {0x83,0x2c}, {0x83,0x0c},
 {0x82,0xec}, {0x82,0xcc}, {0x82,0xac}, {0x82,0x8c},
 {0x82,0x6c}, {0x82,0x4c}, {0x82,0x2c}, {0x82,0x0c},
 {0x81,0xec}, {0x81,0xcc}, {0x81,0xac}, {0x81,0x8c},
 {0x81,0x74}, {0x81,0x64}, {0x81,0x54}, {0x81,0x44},
 {0x81,0x34}, {0x81,0x24}, {0x81,0x14}, {0x81,0x04},
 {0x80,0xf4}, {0x80,0xe4}, {0x80,0xd4}, {0x80,0xc4},
 {0x80,0xb4}, {0x80,0xa4}, {0x80,0x94}, {0x80,0x84},
 {0x80,0x78}, {0x80,0x70}, {0x80,0x68}, {0x80,0x60},
 {0x80,0x58}, {0x80,0x50}, {0x80,0x48}, {0x80,0x40},
 {0x80,0x38}, {0x80,0x30}, {0x80,0x28}, {0x80,0x20},
 {0x80,0x18}, {0x80,0x10}, {0x80,0x08}, {0x80,0x00},
};
static const u_char lintomulaw[256] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03,
 0x03, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05,
 0x05, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07,
 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09,
 0x09, 0x0a, 0x0a, 0x0a, 0x0a, 0x0b, 0x0b, 0x0b,
 0x0b, 0x0c, 0x0c, 0x0c, 0x0c, 0x0d, 0x0d, 0x0d,
 0x0d, 0x0e, 0x0e, 0x0e, 0x0e, 0x0f, 0x0f, 0x0f,
 0x0f, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13,
 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17,
 0x17, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b,
 0x1b, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f,
 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26,
 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e,
 0x2f, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c,
 0x3e, 0x41, 0x45, 0x49, 0x4d, 0x53, 0x5b, 0x67,
 0xff, 0xe7, 0xdb, 0xd3, 0xcd, 0xc9, 0xc5, 0xc1,
 0xbe, 0xbc, 0xba, 0xb8, 0xb6, 0xb4, 0xb2, 0xb0,
 0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8,
 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0,
 0x9f, 0x9f, 0x9e, 0x9e, 0x9d, 0x9d, 0x9c, 0x9c,
 0x9b, 0x9b, 0x9a, 0x9a, 0x99, 0x99, 0x98, 0x98,
 0x97, 0x97, 0x96, 0x96, 0x95, 0x95, 0x94, 0x94,
 0x93, 0x93, 0x92, 0x92, 0x91, 0x91, 0x90, 0x90,
 0x8f, 0x8f, 0x8f, 0x8f, 0x8e, 0x8e, 0x8e, 0x8e,
 0x8d, 0x8d, 0x8d, 0x8d, 0x8c, 0x8c, 0x8c, 0x8c,
 0x8b, 0x8b, 0x8b, 0x8b, 0x8a, 0x8a, 0x8a, 0x8a,
 0x89, 0x89, 0x89, 0x89, 0x88, 0x88, 0x88, 0x88,
 0x87, 0x87, 0x87, 0x87, 0x86, 0x86, 0x86, 0x86,
 0x85, 0x85, 0x85, 0x85, 0x84, 0x84, 0x84, 0x84,
 0x83, 0x83, 0x83, 0x83, 0x82, 0x82, 0x82, 0x82,
 0x81, 0x81, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80,
};
void
mulaw_to_slinear8(u_char *p, int cc)
{
 while (--cc >= 0) {
  *p = mulawtolin16[*p][0] ^ 0x80;
  ++p;
 }
}
void
slinear8_to_mulaw(u_char *p, int cc)
{
 while (--cc >= 0) {
  *p = lintomulaw[*p ^ 0x80];
  ++p;
 }
}
void
mulaw24_to_slinear24(u_char *p, int cc)
{
 int s, *q = (int *)p;
 while ((cc -= 4) >= 0) {
  s = (*q >> 16) & 0xff;
  *q = (int)((signed char)mulawtolin16[s][0] ^ 0x80) << 16 |
      (u_int)mulawtolin16[s][1] << 8;
  q++;
 }
}
void
slinear24_to_mulaw24(u_char *p, int cc)
{
 u_int *q = (u_int *)p;
 while ((cc -= 4) >= 0) {
  *q = lintomulaw[((*q >> 16) & 0xff) ^ 0x80] << 16;
  q++;
 }
}
